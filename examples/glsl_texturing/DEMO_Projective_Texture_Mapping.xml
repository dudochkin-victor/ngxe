<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!--
==============================================================================
AUTHOR:		JeGX - jegx@ozone3d.net
DATE:		27.03.2006
PURPOSE:	GLSL Texturing.
TUTORIAL:	http://www.ozone3d.net/tutorials/glsl_texturing.php

====================================
 \==:: http://www.oZone3D.Net ::==/
  ================================
==============================================================================
-->


<hyperion version_major="1" version_minor="3">


<scene name="GLSL_Texturing_Demo"  display_fps="TRUE" vsync="TRUE" show_ref_grid="FALSE" >
	<window_size width="1024" height="768" />
	<global_ambient_light r="0.1" g="0.1" b="0.1" a="1.0" />
	<background_color r="0.0" g="0.0" b="0.0" />
	<check_hardware_caps glsl="TRUE" />
</scene>




<light name="Light_01" render="TRUE">
	<position x="0.0" y="100.0" z="100.0" />
	<ambient r="0.0" g="0.0" b="0.0" a="1.0" />
	<diffuse r="1.0" g="1.0" b="1.0" a="1.0" />
	<specular r="1.0" g="1.0" b="1.0" a="1.0" />
</light>




<camera name="Main_Camera" navigation_mode="FLY" display_position="FALSE" display_view_direction="FALSE" >
	<position x="177.73" y="148.69" z="159.48" />
	<lookat x="-0.65" y="-0.44" z="-0.62" w="0.0" />
</camera>



<texture name="proj_tex" filename="data/biohazard_512x512.jpg" filtering_mode="LINEAR" addressing_mode="CLAMP" />


<gizmo	name="projo" render="TRUE" >
	<position x="0.0" y="100.0" z="100.0" />
	<orientation ang="-40.0" x="1.0" y="0.0" z="0.0" />
</gizmo>




<material name="mat_torus" shader_program_name="ProjTexShader" >
	<ambient r="0.3" g="0.3" b="0.3" a="1.0" />
	<diffuse r="0.9" g="0.5" b="0.5" a="1.0" />
	<specular r="0.6" g="0.6" b="0.6" a="1.0" exp="60.0" />
	<add_texture texture_name="proj_tex" texture_unit="0" />
</material>

<mesh render="TRUE" name="torus" shape_type="TORUS" lighting="TRUE" texturing="TRUE" use_vbo="TRUE"
      shadow_caster="TRUE" remove_seam="TRUE" >
	<torus vertex_density="50"/>
	<position x="0.0" y="40.0" z="0.0" />
	<attach_material name="mat_torus" /> 
</mesh>


<shader_program name="AmbientPassShader" >
	
	<raw_data><![CDATA[	 
		[Vertex_Shader]
		
		void main(void)
		{
			gl_Position = ftransform();
		}
		
		[Pixel_Shader]
		
		void main (void)
		{
			vec4 final_color = gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient;
			gl_FragColor = final_color;	
		}
	   	]]></raw_data>

</shader_program>

<shader_program name="ProjTexShader"  >
	<constant_1i name="projMap" value="0" />
	<constant_4x4f name="TexGenMat" transformation_type="NONE"  />
	<constant_4x4f_view_matrix name="InvViewMat" transformation_type="INVERSE" />
	
	<raw_data><![CDATA[	 
	
		[Vertex_Shader]
		
		uniform mat4 TexGenMat;
		uniform mat4 InvViewMat;
		varying vec3 normal, lightDir, eyeVec;

		void main()
		{	
			normal = gl_NormalMatrix * gl_Normal;
			
			vec4 posEye =  gl_ModelViewMatrix * gl_Vertex;
			vec4 posWorld = InvViewMat * posEye;
			gl_TexCoord[0] = TexGenMat * posWorld;

			lightDir = vec3(gl_LightSource[0].position.xyz - posEye.xyz);
			eyeVec = -posEye.xyz;
	
			gl_Position = ftransform();		
		}
		
		
		[Pixel_Shader]
		
		uniform sampler2D projMap;
		varying vec3 normal, lightDir, eyeVec;
		
		
		void main (void)
		{
			vec4 final_color = (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
			(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
			
			vec3 N = normalize(normal);
			vec3 L = normalize(lightDir);
			
			float lambertTerm = dot(N,L);
			
			if(lambertTerm > 0.0)
			{
				final_color += gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse * lambertTerm;	
				
				vec3 E = normalize(eyeVec);
				vec3 R = reflect(-L, N);
				float specular = pow( max(dot(R, E), 0.0), gl_FrontMaterial.shininess );
				final_color += gl_LightSource[0].specular * gl_FrontMaterial.specular * specular;	
				
				
				// Suppress the reverse projection.
				if( gl_TexCoord[0].q>0.0 )
				{
					vec4 ProjMapColor = texture2DProj(projMap, gl_TexCoord[0]).rgba;
					
					//------ Instead using texture2DProj, you can use texture2D
					// but you must divide {s, t} by the q coordinate.
					//
					//vec2 projectedCoords = gl_TexCoord[0].st / gl_TexCoord[0].q;
					//vec4 ProjMapColor = texture2D(projMap, projectedCoords).rgba;
					
					final_color += ProjMapColor*lambertTerm;			
				}
			}
			
			
			
			gl_FragColor = final_color;			
		}
	   	]]></raw_data>

</shader_program>




<script name="init_scene" run_mode="EXECUTE_ONCE" >
	<raw_data><![CDATA[	
	
	function createMatrix()
		local mat = {m0=1.0, m1=0.0, m2=0.0, m3=0.0, 
		             m4=0.0, m5=1.0, m6=0.0, m7=0.0, 
					 m8=0.0, m9=0.0, m10=1.0, m11=0.0, 
					 m12=0.0, m13=0.0, m14=0.0, m15=1.0 };
		return(mat);
	end
	
	
	function buildPerspectiveProjectionMatrix( fov, aspect, znear, zfar )

		local mat = createMatrix();
		
		--
		-- Leeched from QuakeIII source code (R_SetupProjection()). Great!
		--
	
		local fov_x = fov;
		local fov_y = fov;

		local ymax = znear * math.tan( fov_y * 3.14159 / 360.0 );
		local ymin = -ymax;

		local xmax = znear * math.tan( fov_x * 3.14159 / 360.0 );
		local xmin = -xmax;

		local width = xmax - xmin;
		local height = ymax - ymin;

		local q, qn;

		local depth = zfar - znear;
    	q = -(zfar + znear) / depth;
		qn = -2.0 * (zfar * znear) / depth;

		local w = 2.0 * znear / width;
		w = w / aspect;
		local h = 2.0 * znear / height;
		
		mat.m0  = w;
		mat.m1  = 0.0;
		mat.m2  = 0.0;
		mat.m3  = 0.0;

		mat.m4  = 0.0;
		mat.m5  = h;
		mat.m6  = 0.0;
		mat.m7  = 0.0;

		mat.m8  = 0.0;
		mat.m9  = 0.0;
		mat.m10 = q;
		mat.m11 = -1;

		mat.m12 = 0.0;
		mat.m13 = 0.0;
		mat.m14 = qn;
		mat.m15 = 0.0;
		
		return( mat );
	end
	
	
	function multMatrix( m1, m2 )
		local mat = createMatrix();
		
		mat.m0 = m1.m0*m2.m0 + m1.m4*m2.m1 + m1.m8*m2.m2 + m1.m12*m2.m3;
		mat.m1 = m1.m1*m2.m0 + m1.m5*m2.m1 + m1.m9*m2.m2 + m1.m13*m2.m3;
		mat.m2 = m1.m2*m2.m0 + m1.m6*m2.m1 + m1.m10*m2.m2 + m1.m14*m2.m3;
		mat.m3 = m1.m3*m2.m0 + m1.m7*m2.m1 + m1.m11*m2.m2 + m1.m15*m2.m3;

		mat.m4 = m1.m0*m2.m4 + m1.m4*m2.m5 + m1.m8*m2.m6 + m1.m12*m2.m7;
		mat.m5 = m1.m1*m2.m4 + m1.m5*m2.m5 + m1.m9*m2.m6 + m1.m13*m2.m7;
		mat.m6 = m1.m2*m2.m4 + m1.m6*m2.m5 + m1.m10*m2.m6 + m1.m14*m2.m7;
		mat.m7 = m1.m3*m2.m4 + m1.m7*m2.m5 + m1.m11*m2.m6 + m1.m15*m2.m7;

		mat.m8 = m1.m0*m2.m8 + m1.m4*m2.m9 + m1.m8*m2.m10 + m1.m12*m2.m11;
		mat.m9 = m1.m1*m2.m8 + m1.m5*m2.m9 + m1.m9*m2.m10 + m1.m13*m2.m11;
		mat.m10 = m1.m2*m2.m8 + m1.m6*m2.m9 + m1.m10*m2.m10 + m1.m14*m2.m11;
		mat.m11 = m1.m3*m2.m8 + m1.m7*m2.m9 + m1.m11*m2.m10 + m1.m15*m2.m11;

		mat.m12 = m1.m0*m2.m12 + m1.m4*m2.m13 + m1.m8*m2.m14 + m1.m12*m2.m15;
		mat.m13 = m1.m1*m2.m12 + m1.m5*m2.m13 + m1.m9*m2.m14 + m1.m13*m2.m15;
		mat.m14 = m1.m2*m2.m12 + m1.m6*m2.m13 + m1.m10*m2.m14 + m1.m14*m2.m15;
		mat.m15 = m1.m3*m2.m12 + m1.m7*m2.m13 + m1.m11*m2.m14 + m1.m15*m2.m15;
		
		return( mat );
	end
					 
	
	function dotProduct( v1, v2 )
		return( v1.x*v2.x + v1.y*v2.y + v1.z*v2.z );
	end

	function dumpMatrix( mat )
		HYP_Debug.Trace( "m0=" .. mat.m0 );
		HYP_Debug.Trace( "m1=" .. mat.m1 );
		HYP_Debug.Trace( "m2=" .. mat.m2 );
		HYP_Debug.Trace( "m3=" .. mat.m3 );
		HYP_Debug.Trace( "m4=" .. mat.m4 );
		HYP_Debug.Trace( "m5=" .. mat.m5 );
		HYP_Debug.Trace( "m6=" .. mat.m6 );
		HYP_Debug.Trace( "m7=" .. mat.m7 );
		HYP_Debug.Trace( "m8=" .. mat.m8 );
		HYP_Debug.Trace( "m9=" .. mat.m9 );
		HYP_Debug.Trace( "m10=" .. mat.m10 );
		HYP_Debug.Trace( "m11=" .. mat.m11 );
		HYP_Debug.Trace( "m12=" .. mat.m12 );
		HYP_Debug.Trace( "m13=" .. mat.m13 );
		HYP_Debug.Trace( "m14=" .. mat.m14 );
		HYP_Debug.Trace( "m15=" .. mat.m15 );
	end

	
	
	scaleBiasMat = createMatrix();
	
	scaleBiasMat.m0 = 0.5;
	scaleBiasMat.m1 = 0.0;
	scaleBiasMat.m2 = 0.0;
	scaleBiasMat.m3 = 0.0;
	
	scaleBiasMat.m4 = 0.0;
	scaleBiasMat.m5 = 0.5;
	scaleBiasMat.m6 = 0.0;
	scaleBiasMat.m7 = 0.0;
	
	scaleBiasMat.m8 = 0.0;
	scaleBiasMat.m9 = 0.0;
	scaleBiasMat.m10 = 0.5;
	scaleBiasMat.m11 = 0.0;
	
	scaleBiasMat.m12 = 0.5;
	scaleBiasMat.m13 = 0.5;
	scaleBiasMat.m14 = 0.5;
	scaleBiasMat.m15 = 1.0;
	
	
	projMat = buildPerspectiveProjectionMatrix(90.0, 1.0, 0.1, 1.0);
	

	HYP_Object.UpdateTripod( "projo" );
	m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15 = HYP_Object.GetAbsoluteTransformMatrix( "projo" );
	
	position = {x=0.0, y=0.0, z=0.0};
	u = {x=0.0, y=0.0, z=0.0};
	v = {x=0.0, y=0.0, z=0.0};
	n = {x=0.0, y=0.0, z=0.0};
	
	position.x = m12;
	position.y = m13;
	position.z = m14;
	
	u.x = m0;
	u.y = m1;
	u.z = m2;
	
	v.x = m4;
	v.y = m5;
	v.z = m6;
	
	n.x = m8;
	n.y = m9;
	n.z = m10;

	viewMat = createMatrix();
	
	viewMat.m0 = u.x;
	viewMat.m1 = v.x;
	viewMat.m2 = n.x;
	viewMat.m3 = 0.0;
	
	viewMat.m4 = u.y;
	viewMat.m5 = v.y;
	viewMat.m6 = n.y;
	viewMat.m7 = 0.0;

	viewMat.m8 = u.z;
	viewMat.m9 = v.z;
	viewMat.m10 = n.z;
	viewMat.m11 = 0.0;

	viewMat.m12 = -dotProduct( position, u );
	viewMat.m13 = -dotProduct( position, v );
	viewMat.m14 = -dotProduct( position, n );
	viewMat.m15 = 1.0;
	
	projBiasMat = multMatrix( scaleBiasMat, projMat );
	texGenMatrix = multMatrix( projBiasMat, viewMat );
	
	
	--[[
	HYP_Debug.Trace("*** projBiasMat *************************");
	dumpMatrix( projBiasMat );
	HYP_Debug.Trace("*** viewMat *************************");
	dumpMatrix( viewMat );
	HYP_Debug.Trace("*** texGenMatrix *************************");
	dumpMatrix( texGenMatrix );
	--]]

	
	HYP_GPUShader.SetConstant_4x4f( "ProjTexShader", 
	                                "TexGenMat", 
									texGenMatrix.m0, 
									texGenMatrix.m1, 
									texGenMatrix.m2, 
									texGenMatrix.m3, 
									texGenMatrix.m4, 
									texGenMatrix.m5, 
									texGenMatrix.m6, 
									texGenMatrix.m7, 
									texGenMatrix.m8, 
									texGenMatrix.m9, 
									texGenMatrix.m10, 
									texGenMatrix.m11, 
									texGenMatrix.m12, 
									texGenMatrix.m13, 
									texGenMatrix.m14, 
									texGenMatrix.m15 ); 
	]]></raw_data>
</script> 






<material name="floor_mat" shader_program_name="ProjTexShader"
	shader_program_name_for_ambient_pass="AmbientPassShader" >
	<ambient r="0.7" g="0.7" b="0.7" a="1.0" />
	<diffuse r="0.4" g="0.6" b="0.9" a="1.0" />
	<specular r="0.4" g="0.4" b="0.4" a="1.0" exp="60.0" />
	<add_texture texture_name="proj_tex" texture_unit="0" />
</material>

<material name="wall_mat" shader_program_name="ProjTexShader"
	shader_program_name_for_ambient_pass="AmbientPassShader" >
	<ambient r="0.7" g="0.7" b="0.7" a="1.0" />
	<diffuse r="0.4" g="0.6" b="0.9" a="1.0" />
	<specular r="0.4" g="0.4" b="0.4" a="1.0" exp="60.0" />
	<add_texture texture_name="proj_tex" texture_unit="0" />
</material>

<material name="roof_mat" shader_program_name="ProjTexShader"
	shader_program_name_for_ambient_pass="AmbientPassShader" >
	<ambient r="0.7" g="0.7" b="0.7" a="1.0" />
	<diffuse r="0.4" g="0.6" b="0.9" a="1.0" />
	<specular r="0.4" g="0.4" b="0.4" a="1.0" exp="60.0" />
	<add_texture texture_name="proj_tex" texture_unit="0" />
</material>




<mesh name="floor" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE" shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="0.0" y="0.0" z="0.0" />
	<plane x_size="512.0" z_size="512.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="floor_mat" />
</mesh>


<mesh name="wall_back" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE"  shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="0.0" y="100.0" z="-256.0" />
	<orientation pitch="90.0" />
	<plane x_size="512.0" z_size="200.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="wall_mat" />
</mesh>

<mesh name="wall_front" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE" shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="0.0" y="100.0" z="256.0" />
	<orientation pitch="90.0" roll="180.0" />
	<plane x_size="512.0" z_size="200.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="wall_mat" />
</mesh>

<mesh name="wall_left" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE"  shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="-256.0" y="100.0" z="0.0" />
	<orientation pitch="90.0" yaw="90.0" />
	<plane x_size="512.0" z_size="200.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="wall_mat" />
</mesh>

<mesh name="wall_right" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE" shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="256.0" y="100.0" z="0.0" />
	<orientation pitch="90.0" yaw="-90.0" />
	<plane x_size="512.0" z_size="200.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="wall_mat" />
</mesh>


<mesh name="roof" polygon_mode="SOLID" lighting="TRUE" texturing="TRUE" shape_type="PLANE"
      back_face_culling="TRUE" >
	
	<position x="0.0" y="200.0" z="0.0" />
	<orientation pitch="180.0"  />
	<plane x_size="512.0" z_size="512.0" num_segs_x="10" num_segs_z="10" />
	<attach_material name="roof_mat" />
</mesh>






</hyperion>
