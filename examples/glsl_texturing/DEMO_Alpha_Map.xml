<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!--
==============================================================================
AUTHOR:		JeGX - jegx@ozone3d.net
DATE:		27.03.2006
PURPOSE:	GLSL Texturing.
TUTORIAL:	http://www.ozone3d.net/tutorials/glsl_texturing.php

====================================
 \==:: http://www.oZone3D.Net ::==/
  ================================
==============================================================================
-->


<hyperion version_major="1" version_minor="3">


<scene name="GLSL_Texturing_Demo"  display_fps="TRUE" vsync="TRUE" show_ref_grid="TRUE" display_hyperion_logo="FALSE" >
	<window_size width="1024" height="768" />
	<background_color r="0.0" g="0.0" b="0.0" />
	<check_hardware_caps glsl="TRUE" />
</scene>




<camera name="Main_Camera" fov="70.0" navigation_mode="EXAMINE" display_position="FALSE" display_view_direction="FALSE" >
	<position x="0.0" y="100.0" z="350.0" />
	<lookat x="0.0" y="0.0" z="0.0" w="1.0" />
	<orientation pitch="20.0" yaw="90.0" />
</camera>


<light name="Light_01" render="TRUE">
	<position x="0.0" y="200.0" z="200.0" />
	<ambient r="0.6" g="0.6" b="0.6" a="1.0" />
	<diffuse r="1.0" g="1.0" b="1.0" a="1.0" />
	<specular r="0.0" g="0.0" b="0.0" a="1.0" />
</light>




<texture name="baseMap_tex" filename="data/cement.dds" filtering_mode="LINEAR" />

<texture name="alphaMap_tex" filename="data/alpha_map.jpg" filtering_mode="LINEAR" />



<material name="sphere_mat" shader_program_name="AlphaMapShader" >
	<ambient r="0.6" g="0.6" b="0.6" a="1.0" />
	<diffuse r="1.0" g="1.0" b="1.0" a="1.0" />
</material>


<mesh name="mesh_sphere" shape_type="SPHERE" lighting="FALSE" texturing="TRUE" polygon_mode="SOLID" use_vbo="TRUE"
      remove_seam="TRUE" auto_spin="FALSE"  >

	<sphere radius="100.0" slices="20" stacks="20" />
	
	<attach_material name="sphere_mat" />
	
	<texture material_name="sphere_mat" texture_name="baseMap_tex" texture_unit="0" />
	<texture material_name="sphere_mat" texture_name="alphaMap_tex" texture_unit="1" />
	
	<position x="0.0" y="0.0" z="0.0" />
	<orientation pitch="0.0" />
	<spin_values x="50.0" y="50.0" z="50.0" />
</mesh>




<shader_program name="AlphaMapShader"  >
	<constant_1i name="colorMap" value="0" />
	<constant_1i name="alphaMap" value="1" />
	
	<raw_data><![CDATA[	 
		[Vertex_Shader]

		varying vec3 normal, lightDir, eyeVec;
		
		void main()
		{	
			gl_Position = ftransform();		
			gl_TexCoord[0] = gl_MultiTexCoord0;
			
			vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);
			lightDir = vec3(gl_LightSource[0].position.xyz - vVertex);
			eyeVec = -vVertex;
			normal = normalize( gl_NormalMatrix * gl_Normal );
		}

		[Pixel_Shader]
			
		uniform sampler2D colorMap;
		uniform sampler2D alphaMap;
		varying vec3 normal, lightDir, eyeVec;

		void main (void)
		{
			vec4 alpha_color = texture2D(alphaMap, gl_TexCoord[0].xy);
			
			if(alpha_color.r<0.1)
			{
				discard;
			}

			vec4 base_color = texture2D(colorMap, gl_TexCoord[0].xy);
			
			vec4 final_color = (gl_FrontLightModelProduct.sceneColor * gl_FrontMaterial.ambient) + 
			(gl_LightSource[0].ambient * gl_FrontMaterial.ambient);
			
			vec3 N = normalize(normal);
			vec3 L = normalize(lightDir);
			
			float lambertTerm = clamp( dot(N,L), 0.0, 1.0);
			final_color += gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse * lambertTerm;	
			
			final_color *= base_color;
				
			gl_FragColor = final_color;
		}
	   	]]></raw_data>

</shader_program>


<!--
<shader_program name="AlphaMapShader"  >
	<constant_1i name="colorMap" value="0" />
	<constant_1i name="alphaMap" value="1" />
	
	<raw_data><![CDATA[	 
		[Vertex_Shader]

		
		void main()
		{	
			gl_Position = ftransform();		
			gl_TexCoord[0] = gl_MultiTexCoord0;
		}

		[Pixel_Shader]
			
		uniform sampler2D colorMap;
		uniform sampler2D alphaMap;

		void main (void)
		{
			vec4 alpha_color = texture2D(alphaMap, gl_TexCoord[0].xy);
			
			if(alpha_color.r<0.1)
			{
				discard;
			}

			gl_FragColor  = texture2D(colorMap, gl_TexCoord[0].xy);
		}
	   	]]></raw_data>

</shader_program>
-->

<script name="init_scene" run_mode="EXECUTE_ONCE" >
	<raw_data><![CDATA[	 
	
	
	]]></raw_data>
</script> 


<script name="update_scene" run_mode="EXECUTE_EACH_FRAME" >
	<raw_data><![CDATA[	 
	
	
	]]></raw_data>
</script> 




</hyperion>
