<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<!--
==============================================================================
AUTHOR:		JeGX - jegx@ozone3d.net
DATE:		27.03.2006
PURPOSE:	GLSL Texturing.
TUTORIAL:	http://www.ozone3d.net/tutorials/glsl_texturing.php

====================================
 \==:: http://www.oZone3D.Net ::==/
  ================================
==============================================================================
-->


<hyperion version_major="1" version_minor="3">


<scene name="GLSL_Texturing_Demo"  display_fps="TRUE" vsync="TRUE" show_ref_grid="TRUE" display_hyperion_logo="FALSE" >
	<window_size width="1024" height="768" />
	<background_color r="0.0" g="0.0" b="0.0" />
	<check_hardware_caps glsl="TRUE" />
	<background_image image="data/dualparaboloid_nvlobby_back.png" />
</scene>




<camera name="Main_Camera" fov="70.0" navigation_mode="EXAMINE" display_position="FALSE" display_view_direction="FALSE" >
	<position x="0.0" y="100.0" z="350.0" />
	<lookat x="0.0" y="0.0" z="0.0" w="1.0" />
	<orientation pitch="20.0" yaw="90.0" />
</camera>




<texture name="front_tex" filename="data/dualparaboloid_nvlobby_front.png" filtering_mode="LINEAR" />
<texture name="back_tex" filename="data/dualparaboloid_nvlobby_back.png" filtering_mode="LINEAR" />

<!--
<texture name="front_tex" filename="data/dp_front.tga" filtering_mode="LINEAR" />
<texture name="back_tex" filename="data/dp_back.tga" filtering_mode="LINEAR" />
-->



<material name="torus_mat" shader_program_name="DPEM_Shader" />

<mesh name="mesh_torus" shape_type="TORUS" lighting="FALSE" texturing="TRUE" polygon_mode="SOLID" use_vbo="TRUE"
      remove_seam="TRUE" auto_spin="TRUE" >

	<torus radius="150.0" vertex_density="40.0" section_radius="80" />
	
	<attach_material name="torus_mat" />
	
	<texture material_name="torus_mat" texture_name="front_tex" texture_unit="0" />
	<texture material_name="torus_mat" texture_name="back_tex" texture_unit="1" />
	
	<position x="0.0" y="0.0" z="0.0" />
	<orientation pitch="0.0" />
	<spin_values x="50.0" y="50.0" z="50.0" />
</mesh>



<shader_program name="DPEM_Shader"  >
	<constant_1i name="frontMap" value="0" />
	<constant_1i name="backMap" value="1" />
	<constant_4x4f name="ModelWorld4x4" object_name="mesh_torus" transformation_type="NONE" />
	<constant_3f name="CameraPos" x="0.0" y="100.0" z="350.0" />
	
	<raw_data><![CDATA[	 
		[Vertex_Shader]
		
		uniform mat4 ModelWorld4x4;
		uniform vec3 CameraPos;
		
		varying vec3 R;
		
		mat3 GetLinearPart( mat4 m )
		{
			mat3 result;
			
			result[0][0] = m[0][0]; 
			result[0][1] = m[0][1]; 
			result[0][2] = m[0][2]; 

			result[1][0] = m[1][0]; 
			result[1][1] = m[1][1]; 
			result[1][2] = m[1][2]; 
			
			result[2][0] = m[2][0]; 
			result[2][1] = m[2][1]; 
			result[2][2] = m[2][2]; 
			
			return result;
		}		
					   
		void main()
		{	
			gl_Position = ftransform();		
			
			// Simple way but does not work on ATI boards!
			//mat3 ModelWorld3x3 = mat3( ModelWorld4x4 );
			
			// Yeah! works everywhere!
			mat3 ModelWorld3x3 = GetLinearPart( ModelWorld4x4 );
			
			// find world space position.
			vec4 WorldPos = ModelWorld4x4 *  gl_Vertex;	
			
			// find world space normal.
			vec3 N = normalize( ModelWorld3x3 * gl_Normal ); 
			
			// find world space eye vector.
			vec3 E = normalize( WorldPos.xyz - CameraPos.xyz );	
			
			// calculate the reflection vector in world space.
			R = reflect( E, N ); 
		}

		[Pixel_Shader]
		
		uniform sampler2D frontMap;
		uniform sampler2D backMap;
		
		varying vec3 R;
		
		void main (void)
		{
			vec4 output_color;
			
			vec3 vR = normalize(R);
			
			// Select the front or back env map according to the sign of vR.z.
			if(vR.z>0.0)
			{
				// calculate the forward paraboloid map texture coordinates	
				vec2 frontUV;
				frontUV = (vR.xy / (2.0*(1.0 + vR.z))) + 0.5;
				output_color = texture2D( frontMap, frontUV );
			}
			else
			{
				// calculate the backward paraboloid map texture coordinates
				vec2 backUV;
				backUV = (vR.xy / (2.0*(1.0 - vR.z))) + 0.5;
				output_color = texture2D( backMap, backUV );
			}
			
			gl_FragColor = output_color;
		}
	   	]]></raw_data>

</shader_program>


<script name="init_scene" run_mode="EXECUTE_ONCE" >
	<raw_data><![CDATA[	 
	
	
	]]></raw_data>
</script> 


<script name="update_scene" run_mode="EXECUTE_EACH_FRAME" >
	<raw_data><![CDATA[	 
	
	x, y, z = HYP_Camera.GetPosition("Main_Camera");
	HYP_GPUShader.SetConstant_3f( "DPEM_Shader", "CameraPos", x, y, z );
	
	
	]]></raw_data>
</script> 




</hyperion>
